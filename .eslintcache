[{"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/App.js":"1","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/index.js":"2","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/loadAndProcess.js":"3","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/barChart.js":"4","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/states.js":"5","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/reportWebVitals.js":"6","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/popper.js":"7","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/index.js":"8","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/radioButtonGroup.js":"9","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesInfo.js":"10","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesModule.js":"11","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesRoot.js":"12"},{"size":2677,"mtime":1610336319927,"results":"13","hashOfConfig":"14"},{"size":336,"mtime":1610335907348,"results":"15","hashOfConfig":"14"},{"size":2130,"mtime":1610337326219,"results":"16","hashOfConfig":"14"},{"size":6639,"mtime":1610240920911,"results":"17","hashOfConfig":"14"},{"size":1174,"mtime":1609380354982,"results":"18","hashOfConfig":"14"},{"size":362,"mtime":1609209730061,"results":"19","hashOfConfig":"14"},{"size":976,"mtime":1609480273940,"results":"20","hashOfConfig":"14"},{"size":500,"mtime":1609209730060,"results":"21","hashOfConfig":"14"},{"size":1254,"mtime":1610242146543,"results":"22","hashOfConfig":"14"},{"size":971,"mtime":1610336689006,"results":"23","hashOfConfig":"14"},{"size":692,"mtime":1610337063408,"results":"24","hashOfConfig":"14"},{"size":293,"mtime":1610336967290,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"lvyga1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/App.js",["52","53","54"],"import React, { useEffect, useRef, useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n// import { BarChart, CasesModule, RadioButtonsGroup } from \"react-use\";\n\n// import { BarChart, CasesModule, RadioButtonsGroup } from \"react-use\";\n\nimport { BarChart, RadioButtonsGroup, CasesRoot } from \"./components\";\nimport { LoadAndProcess } from \"./loadAndProcess\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [data, setData] = useState();\n  var [selectedBar, setSelectedBar] = useState();\n  let [currentCase, setCurrentCase] = useState(\"total cases\");\n  const globalCaseArr = [\"total cases\", \"total deaths\"];\n  // const [ref, { width }] = useMeasure();\n  // const [ref, { x, y, width, height, top, right, bottom, left }] = useMeasure();\n\n  // const onMouseOver = (d) => {\n  //   return setSelectedBar((selectedBar = d));\n  //   console.log(\"worky\");\n  // };\n\n  const onRadioClick = (e) => setCurrentCase(e.target.value);\n\n  const margin = { top: 90, right: 50, bottom: 80, left: 30 };\n\n  useEffect(() => {\n    LoadAndProcess().then((d) => {\n      setData(d);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\" style={{ height: \"100vh\" }}>\n      <Container>\n        <Row className=\"pt-5\">\n          {data ? (\n            <Col md={7} xs={12}>\n              <Row>\n                <RadioButtonsGroup\n                  selectedCase={currentCase}\n                  setCurrentCase={onRadioClick}\n                  globalCaseArr={globalCaseArr}\n                />\n                <BarChart\n                  currentCase={currentCase}\n                  // svgWidth={width}\n                  // svgHeight={heigh}\n                  // selectedRectBar={selectedBar}\n                  margin={margin}\n                  // onMouse={onMouseOver}\n                  props={data}\n                  x={margin.left}\n                  y={margin.top}\n                />\n              </Row>\n            </Col>\n          ) : (\n            <h1> Loading... </h1>\n          )}\n          {data ? (\n            <Col md={{ span: 4, offset: 1 }}>\n              <CasesRoot data={data} />\n            </Col>\n          ) : (\n            <h1>Loading cases...</h1>\n          )}\n        </Row>\n\n        <Row style={{ marginTop: \"30px\" }}>\n          <Col\n            style={{ backgroundColor: \"black\", height: \"30px\" }}\n            sm={12}\n            lg={6}\n          ></Col>\n          <Col\n            style={{ backgroundColor: \"red\", height: \"30px\" }}\n            sm={12}\n            lg={6}\n          ></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/index.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/loadAndProcess.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/barChart.js",["55","56","57","58"],"import * as d3 from \"d3\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport { useMeasure } from \"react-use\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport styled from \"styled-components\";\n\nimport \"./__barChart.scss\";\n\nconst Rect = styled.rect`\n  fill: steelblue;\n  stroke: 1px solid black;\n`;\n\nlet currentValue;\n\nconst xValue = (d) => d.date;\nconst yValue = (d) =>\n  currentValue === \"total cases\" ? d.totalCases : d.totalDeaths;\n\nconst Tooltip = ({ x, y, data, style }) => (\n  <ForeignObject x={x} y={y} width={100} height={50} style={style}>\n    <div>\n      {/* {console.log(y)} */}\n      <h6>{data.date}</h6>\n      <p> {d3.format(\",\")(yValue(data))}</p>\n    </div>\n  </ForeignObject>\n);\n\nconst ForeignObject = styled.foreignObject`\n  text-align: center;\n  font-size: 9px;\n  border-radius: 10px;\n`;\n\nconst BarChart = ({\n  svgWidth,\n  // svgHeight,\n  currentCase,\n  margin,\n  props,\n  x,\n  y,\n}) => {\n  let [tooltip, setTooltip] = useState(false);\n  let [indexOfBar, setIndexOfBar] = useState(0);\n\n  const [ref, { width }] = useMeasure();\n\n  const svgRef = useRef(null);\n  const { worldArr, statesArr } = props;\n  const globalArr = worldArr.slice(0, 90).reverse();\n  currentValue = currentCase;\n\n  useEffect(() => draw(), [globalArr]);\n\n  console.log(width);\n  const height = 500;\n\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  // const xScale = d3\n  //   .scaleTime()\n  //   .domain([\n  //     new Date(globalArr[0].date),\n  //     new Date(globalArr[globalArr.length - 1].date),\n  //   ])\n  //   .range([0, width]);\n  // .range([0, innerWidth]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(globalArr.map((d) => yValue(d)))])\n    // .domain(d3.extent(globalArr, yValue))\n    .range([innerHeight, 0]);\n\n  const draw = () => {\n    const svg = d3.select(svgRef.current);\n\n    const xScale = d3\n      .scaleTime()\n      .domain([\n        new Date(globalArr[0].date),\n        new Date(globalArr[globalArr.length - 1].date),\n      ])\n      .range([0, innerWidth]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(globalArr.map((d) => yValue(d)))])\n      // .domain(d3.extent(globalArr, yValue))\n      .range([innerHeight, 0]);\n\n    const yTickFormat = (num) => d3.format(\".2s\")(num);\n\n    const xTickValues = globalArr.map((d) => xValue(d));\n\n    const xAxis = d3\n      .axisBottom(xScale)\n      // .tickValues([1, 2, 3, 4, 5])\n      .tickFormat(d3.utcFormat(\"%-m/%-d\"))\n      .ticks(innerWidth < 500 ? 6 : 10);\n    // d3.utcMonday\n    //   .every(width > 720 ? 1 : 2)\n    //   .range(globalArr[0].date, globalArr[globalArr.length - 1].date)\n\n    const yAxis = d3\n      .axisRight(yScale)\n      .tickSize(innerWidth)\n      .tickFormat(yTickFormat);\n    // .nice();\n\n    const g = svg.selectAll(\".container\").data([null]);\n    const gEnter = g.enter().append(\"g\").attr(\"class\", \"container\");\n    gEnter\n      .merge(g)\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n      .selectAll(\".container\")\n      .remove();\n\n    const xAxisG = g.select(\".x-axis\");\n    const xAxisGEnter = gEnter\n      .append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(0, ${innerHeight})`);\n    xAxisGEnter.merge(xAxisG).call(xAxis).selectAll(\".domain\").remove();\n\n    const yAxisG = g.select(\".y-axis\");\n    const yAxisGEnter = gEnter.append(\"g\").attr(\"class\", \"y-axis\");\n    yAxisGEnter.merge(yAxisG).call(yAxis).selectAll(\".domain\").remove();\n\n    xAxisGEnter\n      .append(\"text\")\n      .attr(\"class\", \"axis-label\")\n      .attr(\"x\", -93)\n      .attr(\"transform\", `rotate(90)`)\n      .attr(\"fill\", \"black\")\n      .attr(\"text-anchor\", \"middle\")\n      .merge(xAxisG.select(\".axis-label\"))\n      .attr(\"y\", -innerWidth / 2);\n\n    yAxisGEnter\n      .append(\"text\")\n      .attr(\"class\", \"axis-label\")\n      .attr(\"y\", -93)\n      .attr(\"transform\", `rotate(90)`)\n      .attr(\"fill\", \"black\")\n      .attr(\"text-anchor\", \"middle\")\n      .merge(yAxisG.select(\".axis-label\"))\n      .attr(\"x\", -innerHeight / 2);\n\n    // const rectBars = gEnter.selectAll(\".rectBars\").data(globalArr).join(\"rect\");\n\n    svg\n      .selectAll(\"rect\")\n      .data(globalArr)\n      .attr(\"opacity\", (d) => (!tooltip || d === tooltip ? 1 : 0.5))\n      .attr(\"x\", (d, i) => (i * innerWidth) / globalArr.length);\n    // .transition()\n    // .duration(250);\n\n    gEnter\n      .append(\"text\")\n      .attr(\n        \"transform\",\n        `translate(${width / 2}, ${-margin.top + margin.bottom / 2})`\n      )\n      .attr(\"class\", \"chart-title\")\n      .text(\"Global COVID Cases\");\n\n    // svg\n    //   .selectAll(\"foreignobject\")\n    //   .data(globalArr)\n    //   .attr(\"x\", (d, i) => (i * innerWidth) / globalArr.length);\n\n    // const title = d3.select(\".title\").data([null]);\n    // const titleEnter = title.join(\"h1\").attr(\"class\", \"title\").text(\"Hi\");\n  };\n\n  const bars = globalArr.map((d, index) => (\n    <Rect\n      rx={\"1px\"}\n      height={innerHeight - yScale(yValue(d))}\n      width={innerWidth / globalArr.length}\n      y={yScale(yValue(d))}\n      x={(index * innerWidth) / globalArr.length}\n      style={\n        currentCase === \"total cases\"\n          ? { fill: \"steelblue\" }\n          : { fill: \"indianred\" }\n      }\n      id={index}\n      key={index}\n      onMouseOver={() => {\n        setIndexOfBar(index);\n        return setTooltip(d);\n      }}\n      onMouseOut={() => setTooltip(false)}\n    />\n  ));\n\n  return (\n    <Col className=\"d-flex\" ref={ref}>\n      <svg ref={svgRef} height={height} width={width} id=\"svg-id\">\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {bars}\n          {tooltip && (\n            <Tooltip\n              // x={xScale(xValue(tooltip))}\n              x={\n                indexOfBar > 63\n                  ? (indexOfBar * innerWidth) / globalArr.length -\n                    margin.left * 3.5\n                  : (indexOfBar * innerWidth) / globalArr.length\n              }\n              y={\n                width < 420 && indexOfBar > 50\n                  ? yScale(yValue(tooltip)) + margin.top\n                  : yScale(yValue(tooltip)) - margin.top\n              }\n              style={\n                currentCase === \"total cases\"\n                  ? { backgroundColor: \"steelblue\" }\n                  : { backgroundColor: \"indianred\" }\n              }\n              // y={innerHeight - margin.top}\n              data={tooltip}\n            />\n          )}\n        </g>\n        <g className=\"y-axis\" />\n        <g className=\"x-axis\" />\n      </svg>\n    </Col>\n  );\n};\n\nexport default BarChart;\n","/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/states.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/reportWebVitals.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/popper.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/index.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/radioButtonGroup.js",["59"],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesInfo.js",[],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesModule.js",["60","61"],"/Users/kennyngo/Documents/codingProjects/personal/covid-dashboard-with-react/src/components/casesRoot.js",["62"],{"ruleId":"63","severity":1,"message":"64","line":1,"column":28,"nodeType":"65","messageId":"66","endLine":1,"endColumn":34},{"ruleId":"63","severity":1,"message":"67","line":17,"column":8,"nodeType":"65","messageId":"66","endLine":17,"endColumn":19},{"ruleId":"63","severity":1,"message":"68","line":17,"column":21,"nodeType":"65","messageId":"66","endLine":17,"endColumn":35},{"ruleId":"63","severity":1,"message":"69","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":22},{"ruleId":"63","severity":1,"message":"70","line":52,"column":21,"nodeType":"65","messageId":"66","endLine":52,"endColumn":30},{"ruleId":"71","severity":1,"message":"72","line":56,"column":27,"nodeType":"73","endLine":56,"endColumn":38,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"75","line":98,"column":11,"nodeType":"65","messageId":"66","endLine":98,"endColumn":22},{"ruleId":"63","severity":1,"message":"76","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":17},{"ruleId":"63","severity":1,"message":"77","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":11},{"ruleId":"63","severity":1,"message":"78","line":8,"column":8,"nodeType":"65","messageId":"66","endLine":8,"endColumn":14},{"ruleId":"63","severity":1,"message":"70","line":5,"column":21,"nodeType":"65","messageId":"66","endLine":5,"endColumn":30},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'selectedBar' is assigned a value but never used.","'setSelectedBar' is assigned a value but never used.","'ResizeObserver' is defined but never used.","'statesArr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'xTickValues' is assigned a value but never used.","'FormLabel' is defined but never used.","'Col' is defined but never used.","'styled' is defined but never used.",{"desc":"80","fix":"81"},"Update the dependencies array to be: [draw, globalArr]",{"range":"82","text":"83"},[1295,1306],"[draw, globalArr]"]